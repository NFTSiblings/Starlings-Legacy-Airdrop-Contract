// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

/**************************************************************\
 * CenterFacetLib authored by Sibling Labs
 * Version 0.1.0
 * 
 * This contract has been designed as part of a 
/**************************************************************/

import "../ancillary/ERC721DiamondStorage.sol";

library CenterFacetLib {
    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256("starlingslegacy.centerfacet.storage");

    struct state {
        address authorisedSigner;
        string baseURI;
        bool burnsPermitted;
        mapping(address => bool) allowedTransferrers;
        mapping(uint256 => bool) allowedTransferTokens;
    }

    /**
    * @dev Return stored state struct.
    */
    function getState() internal pure returns (state storage _state) {
        bytes32 position = DIAMOND_STORAGE_POSITION;
        assembly {
            _state.slot := position
        }
    }
}

/**************************************************************\
 * CenterFacet authored by Sibling Labs
 * Version 0.1.0
 * 
 * This facet contract has been written specifically for
 * ERC721A-DIAMOND-TEMPLATE by Sibling Labs
/**************************************************************/

import { GlobalState } from "../libraries/GlobalState.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract CenterFacet is ERC721 {
    using ECDSA for bytes32;
    using ECDSA for bytes;

    // VARIABLE GETTERS //

    function authorisedSigner() external view returns (address) {
        return CenterFacetLib.getState().authorisedSigner;
    }

    function burnsPermitted() external view returns (bool) {
        return CenterFacetLib.getState().burnsPermitted;
    }

    // SETUP & ADMIN FUNCTIONS //

    function toggleBurnPermission() external {
        GlobalState.requireCallerIsAdmin();
        CenterFacetLib.getState().burnsPermitted = !CenterFacetLib.getState().burnsPermitted;
    }

    function setBaseURI(string memory uri) external {
        GlobalState.requireCallerIsAdmin();
        CenterFacetLib.getState().baseURI = uri;
    }

    function setAuthorisedSigner(address s) external {
        GlobalState.requireCallerIsAdmin();
        CenterFacetLib.getState().authorisedSigner = s;
    }

    function reserve(uint256 amount) external {
        GlobalState.requireCallerIsAdmin();
        _safeMint(msg.sender, amount);
    }

    // PUBLIC FUNCTIONS //

    /// @param signature a bytes signature generated by the authorised signer
    ///                  containing the address of the minting wallet, and
    ///                  the ID of the token to be minted
    function mint(uint256 tokenId, bytes calldata signature) external payable {
        GlobalState.requireContractIsNotPaused();
        require(
            abi.encodePacked(msg.sender, tokenId)
            .toEthSignedMessageHash()
            .recover(signature) == CenterFacetLib.getState().authorisedSigner,
            "CenterFacet: invalid signature"
        );

        _safeMint(msg.sender, tokenId);
    }

    function burn(uint256 tokenId) external {
        GlobalState.requireContractIsNotPaused();
        require(
            CenterFacetLib.getState().burnsPermitted,
            "CenterFacet: token burning is not permitted now"
        );

        _burn(tokenId);
    }

    // METADATA & MISC FUNCTIONS //

    function exists(uint256 tokenId) external view returns (bool) {
        return _exists(tokenId);
    }

    function _baseURI() internal view override returns (string memory) {
        return CenterFacetLib.getState().baseURI;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override {
        super._beforeTokenTransfer(from, to, tokenId);

        GlobalState.requireContractIsNotPaused();
        require(
            from == address(0) ||
            CenterFacetLib.getState().allowedTransferrers[from] ||
            CenterFacetLib.getState().allowedTransferTokens[tokenId],
            "CenterFacet: token transfers prohibited"
        );
    }
}